[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vibeteam"
version = "0.1.0"
description = "AI-powered multi-agent coding tool with automated task completion"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "VibeTeam", email = "team@vibetech.co"},
]
maintainers = [
    {name = "VibeTeam", email = "team@vibetech.co"},
]
keywords = ["ai", "coding", "automation", "cli", "multi-agent", "development"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "claude-code-sdk @ git+https://github.com/anthropics/claude-code-sdk-python",
    "typing_extensions",
    "litellm>=1.35.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=4.0.0", 
    "mypy>=0.950",
    "isort>=5.10.0",
]
mcp = [
    "uvicorn[standard]>=0.18.0",
    "fastapi>=0.95.0",
    "starlette>=0.25.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
]

[project.scripts]
vibeteam-task = "vibeteam_tasks:main"
vibeteam-cli = "cli.main_cli:main"
vibeteam-mcp = "run_mcp_server:main_console"

[project.urls]
Homepage = "https://github.com/VibeTechnologies/VibeTeam"
Documentation = "https://github.com/VibeTechnologies/VibeTeam#readme"
Repository = "https://github.com/VibeTechnologies/VibeTeam.git"
"Bug Tracker" = "https://github.com/VibeTechnologies/VibeTeam/issues"
Changelog = "https://github.com/VibeTechnologies/VibeTeam/releases"

[tool.setuptools]
packages = ["agents", "cli", "communication", "mcp", "tasks", "utils", "tests"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | deploy
  | doc
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=vibeteam",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "requires_api: marks tests that require API keys",
]

[tool.coverage.run]
source = ["vibeteam"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/deploy/*",
    "*/doc/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]